#######################
# Input Schema
#######################

type User {
	id: ID!
	email: String! @id
	name: String!
	age: Int
	isAdmin: Boolean
	createdTimestamp: DateTime
	requests(filter: RequestFilter, order: RequestOrder, first: Int, offset: Int): [Request] @hasInverse(field: "owner")
	skills(filter: SkillFilter, order: SkillOrder, first: Int, offset: Int): [Skill] @hasInverse(field: "owner")
	gratitudeSent(filter: GratitudeFilter, order: GratitudeOrder, first: Int, offset: Int): [Gratitude] @hasInverse(field: "from")
	gratitudeReceived(filter: GratitudeFilter, order: GratitudeOrder, first: Int, offset: Int): [Gratitude] @hasInverse(field: "to")
	requestsAggregate(filter: RequestFilter): RequestAggregateResult
	skillsAggregate(filter: SkillFilter): SkillAggregateResult
	gratitudeSentAggregate(filter: GratitudeFilter): GratitudeAggregateResult
	gratitudeReceivedAggregate(filter: GratitudeFilter): GratitudeAggregateResult
}

type Request {
	id: ID!
	owner(filter: UserFilter): User! @hasInverse(field: "requests")
	title: String! @search
	message: String! @search
	status: RequestStatus!
	hashtagVariants(filter: HashtagVariantFilter, order: HashtagVariantOrder, first: Int, offset: Int): [HashtagVariant]! @hasInverse(field: "requests")
	createdTimestamp: DateTime
	hashtagVariantsAggregate(filter: HashtagVariantFilter): HashtagVariantAggregateResult
}

enum RequestStatus {
	OPEN
	TENTATIVE
	FILLED
	DONE
}

type Skill {
	id: ID!
	owner(filter: UserFilter): User! @hasInverse(field: "skills")
	title: String
	message: String
	hashtagVariants(filter: HashtagVariantFilter, order: HashtagVariantOrder, first: Int, offset: Int): [HashtagVariant]! @hasInverse(field: "skills")
	isAvailable: Boolean
	createdTimestamp: DateTime
	hashtagVariantsAggregate(filter: HashtagVariantFilter): HashtagVariantAggregateResult
}

type Gratitude {
	id: ID!
	from(filter: UserFilter): User! @hasInverse(field: "gratitudeSent")
	to(filter: UserFilter): User! @hasInverse(field: "gratitudeReceived")
	message: String
	hashtagVariants(filter: HashtagVariantFilter, order: HashtagVariantOrder, first: Int, offset: Int): [HashtagVariant]! @hasInverse(field: "gratitudes")
	createdTimestamp: DateTime
	hashtagVariantsAggregate(filter: HashtagVariantFilter): HashtagVariantAggregateResult
}

type HashtagVariant {
	id: ID!
	variant: String! @id @search(by: [exact,regexp])
	hashtag(filter: HashtagFilter): Hashtag! @hasInverse(field: "hashtagVariants")
	skills(filter: SkillFilter, order: SkillOrder, first: Int, offset: Int): [Skill] @hasInverse(field: "hashtagVariants")
	requests(filter: RequestFilter, order: RequestOrder, first: Int, offset: Int): [Request] @hasInverse(field: "hashtagVariants")
	gratitudes(filter: GratitudeFilter, order: GratitudeOrder, first: Int, offset: Int): [Gratitude] @hasInverse(field: "hashtagVariants")
	skillsAggregate(filter: SkillFilter): SkillAggregateResult
	requestsAggregate(filter: RequestFilter): RequestAggregateResult
	gratitudesAggregate(filter: GratitudeFilter): GratitudeAggregateResult
}

type Hashtag {
	id: ID!
	name: String! @id @search(by: [exact,regexp])
	iconName: String
	blessed: Boolean @search
	blessedInt: Int
	hashtagVariants(filter: HashtagVariantFilter, order: HashtagVariantOrder, first: Int, offset: Int): [HashtagVariant] @hasInverse(field: "hashtag")
	skillCountAllTime: Int
	requestCountAllTime: Int
	skillCountLast24h: Int
	requestCountLast24h: Int
	skillCountLast1w: Int
	requestCountLast1w: Int
	hashtagVariantsAggregate(filter: HashtagVariantFilter): HashtagVariantAggregateResult
}

#######################
# Extended Definitions
#######################

"""
The Int64 scalar type represents a signed 64‐bit numeric non‐fractional value.
Int64 can represent values in range [-(2^63),(2^63 - 1)].
"""
scalar Int64

"""
The DateTime scalar type represents date and time as a string in RFC3339 format.
For example: "1985-04-12T23:20:50.52Z" represents 20 minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
"""
scalar DateTime

input IntRange{
	min: Int!
	max: Int!
}

input FloatRange{
	min: Float!
	max: Float!
}

input Int64Range{
	min: Int64!
	max: Int64!
}

input DateTimeRange{
	min: DateTime!
	max: DateTime!
}

input StringRange{
	min: String!
	max: String!
}

enum DgraphIndex {
	int
	int64
	float
	bool
	hash
	exact
	term
	fulltext
	trigram
	regexp
	year
	month
	day
	hour
	geo
}

input AuthRule {
	and: [AuthRule]
	or: [AuthRule]
	not: AuthRule
	rule: String
}

enum HTTPMethod {
	GET
	POST
	PUT
	PATCH
	DELETE
}

enum Mode {
	BATCH
	SINGLE
}

input CustomHTTP {
	url: String!
	method: HTTPMethod!
	body: String
	graphql: String
	mode: Mode
	forwardHeaders: [String!]
	secretHeaders: [String!]
	introspectionHeaders: [String!]
	skipIntrospection: Boolean
}

type Point {
	longitude: Float!
	latitude: Float!
}

input PointRef {
	longitude: Float!
	latitude: Float!
}

input NearFilter {
	distance: Float!
	coordinate: PointRef!
}

input PointGeoFilter {
	near: NearFilter
	within: WithinFilter
}

type PointList {
	points: [Point!]!
}

input PointListRef {
	points: [PointRef!]!
}

type Polygon {
	coordinates: [PointList!]!
}

input PolygonRef {
	coordinates: [PointListRef!]!
}

type MultiPolygon {
	polygons: [Polygon!]!
}

input MultiPolygonRef {
	polygons: [PolygonRef!]!
}

input WithinFilter {
	polygon: PolygonRef!
}

input ContainsFilter {
	point: PointRef
	polygon: PolygonRef
}

input IntersectsFilter {
	polygon: PolygonRef
	multiPolygon: MultiPolygonRef
}

input PolygonGeoFilter {
	near: NearFilter
	within: WithinFilter
	contains: ContainsFilter
	intersects: IntersectsFilter
}

input GenerateQueryParams {
	get: Boolean
	query: Boolean
	password: Boolean
	aggregate: Boolean
}

input GenerateMutationParams {
	add: Boolean
	update: Boolean
	delete: Boolean
}

directive @hasInverse(field: String!) on FIELD_DEFINITION
directive @search(by: [DgraphIndex!]) on FIELD_DEFINITION
directive @dgraph(type: String, pred: String) on OBJECT | INTERFACE | FIELD_DEFINITION
directive @id on FIELD_DEFINITION
directive @withSubscription on OBJECT | INTERFACE | FIELD_DEFINITION
directive @secret(field: String!, pred: String) on OBJECT | INTERFACE
directive @auth(
	password: AuthRule
	query: AuthRule,
	add: AuthRule,
	update: AuthRule,
	delete: AuthRule) on OBJECT | INTERFACE
directive @custom(http: CustomHTTP, dql: String) on FIELD_DEFINITION
directive @remote on OBJECT | INTERFACE | UNION | INPUT_OBJECT | ENUM
directive @remoteResponse(name: String) on FIELD_DEFINITION
directive @cascade(fields: [String]) on FIELD
directive @lambda on FIELD_DEFINITION
directive @lambdaOnMutate(add: Boolean, update: Boolean, delete: Boolean) on OBJECT | INTERFACE
directive @cacheControl(maxAge: Int!) on QUERY
directive @generate(
	query: GenerateQueryParams,
	mutation: GenerateMutationParams,
	subscription: Boolean) on OBJECT | INTERFACE

input IntFilter {
	eq: Int
	in: [Int]
	le: Int
	lt: Int
	ge: Int
	gt: Int
	between: IntRange
}

input Int64Filter {
	eq: Int64
	in: [Int64]
	le: Int64
	lt: Int64
	ge: Int64
	gt: Int64
	between: Int64Range
}

input FloatFilter {
	eq: Float
	in: [Float]
	le: Float
	lt: Float
	ge: Float
	gt: Float
	between: FloatRange
}

input DateTimeFilter {
	eq: DateTime
	in: [DateTime]
	le: DateTime
	lt: DateTime
	ge: DateTime
	gt: DateTime
	between: DateTimeRange
}

input StringTermFilter {
	allofterms: String
	anyofterms: String
}

input StringRegExpFilter {
	regexp: String
}

input StringFullTextFilter {
	alloftext: String
	anyoftext: String
}

input StringExactFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
}

input StringHashFilter {
	eq: String
	in: [String]
}

#######################
# Generated Types
#######################

type AddGratitudePayload {
	gratitude(filter: GratitudeFilter, order: GratitudeOrder, first: Int, offset: Int): [Gratitude]
	numUids: Int
}

type AddHashtagPayload {
	hashtag(filter: HashtagFilter, order: HashtagOrder, first: Int, offset: Int): [Hashtag]
	numUids: Int
}

type AddHashtagVariantPayload {
	hashtagVariant(filter: HashtagVariantFilter, order: HashtagVariantOrder, first: Int, offset: Int): [HashtagVariant]
	numUids: Int
}

type AddRequestPayload {
	request(filter: RequestFilter, order: RequestOrder, first: Int, offset: Int): [Request]
	numUids: Int
}

type AddSkillPayload {
	skill(filter: SkillFilter, order: SkillOrder, first: Int, offset: Int): [Skill]
	numUids: Int
}

type AddUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	numUids: Int
}

type DeleteGratitudePayload {
	gratitude(filter: GratitudeFilter, order: GratitudeOrder, first: Int, offset: Int): [Gratitude]
	msg: String
	numUids: Int
}

type DeleteHashtagPayload {
	hashtag(filter: HashtagFilter, order: HashtagOrder, first: Int, offset: Int): [Hashtag]
	msg: String
	numUids: Int
}

type DeleteHashtagVariantPayload {
	hashtagVariant(filter: HashtagVariantFilter, order: HashtagVariantOrder, first: Int, offset: Int): [HashtagVariant]
	msg: String
	numUids: Int
}

type DeleteRequestPayload {
	request(filter: RequestFilter, order: RequestOrder, first: Int, offset: Int): [Request]
	msg: String
	numUids: Int
}

type DeleteSkillPayload {
	skill(filter: SkillFilter, order: SkillOrder, first: Int, offset: Int): [Skill]
	msg: String
	numUids: Int
}

type DeleteUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	msg: String
	numUids: Int
}

type GratitudeAggregateResult {
	count: Int
	messageMin: String
	messageMax: String
	createdTimestampMin: DateTime
	createdTimestampMax: DateTime
}

type HashtagAggregateResult {
	count: Int
	nameMin: String
	nameMax: String
	iconNameMin: String
	iconNameMax: String
	blessedIntMin: Int
	blessedIntMax: Int
	blessedIntSum: Int
	blessedIntAvg: Float
	skillCountAllTimeMin: Int
	skillCountAllTimeMax: Int
	skillCountAllTimeSum: Int
	skillCountAllTimeAvg: Float
	requestCountAllTimeMin: Int
	requestCountAllTimeMax: Int
	requestCountAllTimeSum: Int
	requestCountAllTimeAvg: Float
	skillCountLast24hMin: Int
	skillCountLast24hMax: Int
	skillCountLast24hSum: Int
	skillCountLast24hAvg: Float
	requestCountLast24hMin: Int
	requestCountLast24hMax: Int
	requestCountLast24hSum: Int
	requestCountLast24hAvg: Float
	skillCountLast1wMin: Int
	skillCountLast1wMax: Int
	skillCountLast1wSum: Int
	skillCountLast1wAvg: Float
	requestCountLast1wMin: Int
	requestCountLast1wMax: Int
	requestCountLast1wSum: Int
	requestCountLast1wAvg: Float
}

type HashtagVariantAggregateResult {
	count: Int
	variantMin: String
	variantMax: String
}

type RequestAggregateResult {
	count: Int
	titleMin: String
	titleMax: String
	messageMin: String
	messageMax: String
	createdTimestampMin: DateTime
	createdTimestampMax: DateTime
}

type SkillAggregateResult {
	count: Int
	titleMin: String
	titleMax: String
	messageMin: String
	messageMax: String
	createdTimestampMin: DateTime
	createdTimestampMax: DateTime
}

type UpdateGratitudePayload {
	gratitude(filter: GratitudeFilter, order: GratitudeOrder, first: Int, offset: Int): [Gratitude]
	numUids: Int
}

type UpdateHashtagPayload {
	hashtag(filter: HashtagFilter, order: HashtagOrder, first: Int, offset: Int): [Hashtag]
	numUids: Int
}

type UpdateHashtagVariantPayload {
	hashtagVariant(filter: HashtagVariantFilter, order: HashtagVariantOrder, first: Int, offset: Int): [HashtagVariant]
	numUids: Int
}

type UpdateRequestPayload {
	request(filter: RequestFilter, order: RequestOrder, first: Int, offset: Int): [Request]
	numUids: Int
}

type UpdateSkillPayload {
	skill(filter: SkillFilter, order: SkillOrder, first: Int, offset: Int): [Skill]
	numUids: Int
}

type UpdateUserPayload {
	user(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	numUids: Int
}

type UserAggregateResult {
	count: Int
	emailMin: String
	emailMax: String
	nameMin: String
	nameMax: String
	ageMin: Int
	ageMax: Int
	ageSum: Int
	ageAvg: Float
	createdTimestampMin: DateTime
	createdTimestampMax: DateTime
}

#######################
# Generated Enums
#######################

enum GratitudeHasFilter {
	from
	to
	message
	hashtagVariants
	createdTimestamp
}

enum GratitudeOrderable {
	message
	createdTimestamp
}

enum HashtagHasFilter {
	name
	iconName
	blessed
	blessedInt
	hashtagVariants
	skillCountAllTime
	requestCountAllTime
	skillCountLast24h
	requestCountLast24h
	skillCountLast1w
	requestCountLast1w
}

enum HashtagOrderable {
	name
	iconName
	blessedInt
	skillCountAllTime
	requestCountAllTime
	skillCountLast24h
	requestCountLast24h
	skillCountLast1w
	requestCountLast1w
}

enum HashtagVariantHasFilter {
	variant
	hashtag
	skills
	requests
	gratitudes
}

enum HashtagVariantOrderable {
	variant
}

enum RequestHasFilter {
	owner
	title
	message
	status
	hashtagVariants
	createdTimestamp
}

enum RequestOrderable {
	title
	message
	createdTimestamp
}

enum SkillHasFilter {
	owner
	title
	message
	hashtagVariants
	isAvailable
	createdTimestamp
}

enum SkillOrderable {
	title
	message
	createdTimestamp
}

enum UserHasFilter {
	email
	name
	age
	isAdmin
	createdTimestamp
	requests
	skills
	gratitudeSent
	gratitudeReceived
}

enum UserOrderable {
	email
	name
	age
	createdTimestamp
}

#######################
# Generated Inputs
#######################

input AddGratitudeInput {
	from: UserRef!
	to: UserRef!
	message: String
	hashtagVariants: [HashtagVariantRef]!
	createdTimestamp: DateTime
}

input AddHashtagInput {
	name: String!
	iconName: String
	blessed: Boolean
	blessedInt: Int
	hashtagVariants: [HashtagVariantRef]
	skillCountAllTime: Int
	requestCountAllTime: Int
	skillCountLast24h: Int
	requestCountLast24h: Int
	skillCountLast1w: Int
	requestCountLast1w: Int
}

input AddHashtagVariantInput {
	variant: String!
	hashtag: HashtagRef!
	skills: [SkillRef]
	requests: [RequestRef]
	gratitudes: [GratitudeRef]
}

input AddRequestInput {
	owner: UserRef!
	title: String!
	message: String!
	status: RequestStatus!
	hashtagVariants: [HashtagVariantRef]!
	createdTimestamp: DateTime
}

input AddSkillInput {
	owner: UserRef!
	title: String
	message: String
	hashtagVariants: [HashtagVariantRef]!
	isAvailable: Boolean
	createdTimestamp: DateTime
}

input AddUserInput {
	email: String!
	name: String!
	age: Int
	isAdmin: Boolean
	createdTimestamp: DateTime
	requests: [RequestRef]
	skills: [SkillRef]
	gratitudeSent: [GratitudeRef]
	gratitudeReceived: [GratitudeRef]
}

input GratitudeFilter {
	id: [ID!]
	has: [GratitudeHasFilter]
	and: [GratitudeFilter]
	or: [GratitudeFilter]
	not: GratitudeFilter
}

input GratitudeOrder {
	asc: GratitudeOrderable
	desc: GratitudeOrderable
	then: GratitudeOrder
}

input GratitudePatch {
	from: UserRef
	to: UserRef
	message: String
	hashtagVariants: [HashtagVariantRef]
	createdTimestamp: DateTime
}

input GratitudeRef {
	id: ID
	from: UserRef
	to: UserRef
	message: String
	hashtagVariants: [HashtagVariantRef]
	createdTimestamp: DateTime
}

input HashtagFilter {
	id: [ID!]
	name: StringExactFilter_StringRegExpFilter
	blessed: Boolean
	has: [HashtagHasFilter]
	and: [HashtagFilter]
	or: [HashtagFilter]
	not: HashtagFilter
}

input HashtagOrder {
	asc: HashtagOrderable
	desc: HashtagOrderable
	then: HashtagOrder
}

input HashtagPatch {
	iconName: String
	blessed: Boolean
	blessedInt: Int
	hashtagVariants: [HashtagVariantRef]
	skillCountAllTime: Int
	requestCountAllTime: Int
	skillCountLast24h: Int
	requestCountLast24h: Int
	skillCountLast1w: Int
	requestCountLast1w: Int
}

input HashtagRef {
	id: ID
	name: String
	iconName: String
	blessed: Boolean
	blessedInt: Int
	hashtagVariants: [HashtagVariantRef]
	skillCountAllTime: Int
	requestCountAllTime: Int
	skillCountLast24h: Int
	requestCountLast24h: Int
	skillCountLast1w: Int
	requestCountLast1w: Int
}

input HashtagVariantFilter {
	id: [ID!]
	variant: StringExactFilter_StringRegExpFilter
	has: [HashtagVariantHasFilter]
	and: [HashtagVariantFilter]
	or: [HashtagVariantFilter]
	not: HashtagVariantFilter
}

input HashtagVariantOrder {
	asc: HashtagVariantOrderable
	desc: HashtagVariantOrderable
	then: HashtagVariantOrder
}

input HashtagVariantPatch {
	hashtag: HashtagRef
	skills: [SkillRef]
	requests: [RequestRef]
	gratitudes: [GratitudeRef]
}

input HashtagVariantRef {
	id: ID
	variant: String
	hashtag: HashtagRef
	skills: [SkillRef]
	requests: [RequestRef]
	gratitudes: [GratitudeRef]
}

input RequestFilter {
	id: [ID!]
	title: StringTermFilter
	message: StringTermFilter
	has: [RequestHasFilter]
	and: [RequestFilter]
	or: [RequestFilter]
	not: RequestFilter
}

input RequestOrder {
	asc: RequestOrderable
	desc: RequestOrderable
	then: RequestOrder
}

input RequestPatch {
	owner: UserRef
	title: String
	message: String
	status: RequestStatus
	hashtagVariants: [HashtagVariantRef]
	createdTimestamp: DateTime
}

input RequestRef {
	id: ID
	owner: UserRef
	title: String
	message: String
	status: RequestStatus
	hashtagVariants: [HashtagVariantRef]
	createdTimestamp: DateTime
}

input SkillFilter {
	id: [ID!]
	has: [SkillHasFilter]
	and: [SkillFilter]
	or: [SkillFilter]
	not: SkillFilter
}

input SkillOrder {
	asc: SkillOrderable
	desc: SkillOrderable
	then: SkillOrder
}

input SkillPatch {
	owner: UserRef
	title: String
	message: String
	hashtagVariants: [HashtagVariantRef]
	isAvailable: Boolean
	createdTimestamp: DateTime
}

input SkillRef {
	id: ID
	owner: UserRef
	title: String
	message: String
	hashtagVariants: [HashtagVariantRef]
	isAvailable: Boolean
	createdTimestamp: DateTime
}

input StringExactFilter_StringRegExpFilter {
	eq: String
	in: [String]
	le: String
	lt: String
	ge: String
	gt: String
	between: StringRange
	regexp: String
}

input UpdateGratitudeInput {
	filter: GratitudeFilter!
	set: GratitudePatch
	remove: GratitudePatch
}

input UpdateHashtagInput {
	filter: HashtagFilter!
	set: HashtagPatch
	remove: HashtagPatch
}

input UpdateHashtagVariantInput {
	filter: HashtagVariantFilter!
	set: HashtagVariantPatch
	remove: HashtagVariantPatch
}

input UpdateRequestInput {
	filter: RequestFilter!
	set: RequestPatch
	remove: RequestPatch
}

input UpdateSkillInput {
	filter: SkillFilter!
	set: SkillPatch
	remove: SkillPatch
}

input UpdateUserInput {
	filter: UserFilter!
	set: UserPatch
	remove: UserPatch
}

input UserFilter {
	id: [ID!]
	email: StringHashFilter
	has: [UserHasFilter]
	and: [UserFilter]
	or: [UserFilter]
	not: UserFilter
}

input UserOrder {
	asc: UserOrderable
	desc: UserOrderable
	then: UserOrder
}

input UserPatch {
	name: String
	age: Int
	isAdmin: Boolean
	createdTimestamp: DateTime
	requests: [RequestRef]
	skills: [SkillRef]
	gratitudeSent: [GratitudeRef]
	gratitudeReceived: [GratitudeRef]
}

input UserRef {
	id: ID
	email: String
	name: String
	age: Int
	isAdmin: Boolean
	createdTimestamp: DateTime
	requests: [RequestRef]
	skills: [SkillRef]
	gratitudeSent: [GratitudeRef]
	gratitudeReceived: [GratitudeRef]
}

#######################
# Generated Query
#######################

type Query {
	getUser(id: ID, email: String): User
	queryUser(filter: UserFilter, order: UserOrder, first: Int, offset: Int): [User]
	aggregateUser(filter: UserFilter): UserAggregateResult
	getRequest(id: ID!): Request
	queryRequest(filter: RequestFilter, order: RequestOrder, first: Int, offset: Int): [Request]
	aggregateRequest(filter: RequestFilter): RequestAggregateResult
	getSkill(id: ID!): Skill
	querySkill(filter: SkillFilter, order: SkillOrder, first: Int, offset: Int): [Skill]
	aggregateSkill(filter: SkillFilter): SkillAggregateResult
	getGratitude(id: ID!): Gratitude
	queryGratitude(filter: GratitudeFilter, order: GratitudeOrder, first: Int, offset: Int): [Gratitude]
	aggregateGratitude(filter: GratitudeFilter): GratitudeAggregateResult
	getHashtagVariant(id: ID, variant: String): HashtagVariant
	queryHashtagVariant(filter: HashtagVariantFilter, order: HashtagVariantOrder, first: Int, offset: Int): [HashtagVariant]
	aggregateHashtagVariant(filter: HashtagVariantFilter): HashtagVariantAggregateResult
	getHashtag(id: ID, name: String): Hashtag
	queryHashtag(filter: HashtagFilter, order: HashtagOrder, first: Int, offset: Int): [Hashtag]
	aggregateHashtag(filter: HashtagFilter): HashtagAggregateResult
}

#######################
# Generated Mutations
#######################

type Mutation {
	addUser(input: [AddUserInput!]!, upsert: Boolean): AddUserPayload
	updateUser(input: UpdateUserInput!): UpdateUserPayload
	deleteUser(filter: UserFilter!): DeleteUserPayload
	addRequest(input: [AddRequestInput!]!): AddRequestPayload
	updateRequest(input: UpdateRequestInput!): UpdateRequestPayload
	deleteRequest(filter: RequestFilter!): DeleteRequestPayload
	addSkill(input: [AddSkillInput!]!): AddSkillPayload
	updateSkill(input: UpdateSkillInput!): UpdateSkillPayload
	deleteSkill(filter: SkillFilter!): DeleteSkillPayload
	addGratitude(input: [AddGratitudeInput!]!): AddGratitudePayload
	updateGratitude(input: UpdateGratitudeInput!): UpdateGratitudePayload
	deleteGratitude(filter: GratitudeFilter!): DeleteGratitudePayload
	addHashtagVariant(input: [AddHashtagVariantInput!]!, upsert: Boolean): AddHashtagVariantPayload
	updateHashtagVariant(input: UpdateHashtagVariantInput!): UpdateHashtagVariantPayload
	deleteHashtagVariant(filter: HashtagVariantFilter!): DeleteHashtagVariantPayload
	addHashtag(input: [AddHashtagInput!]!, upsert: Boolean): AddHashtagPayload
	updateHashtag(input: UpdateHashtagInput!): UpdateHashtagPayload
	deleteHashtag(filter: HashtagFilter!): DeleteHashtagPayload
}

